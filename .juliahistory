help("List")
fact(10)
fact(100)
fact(10)
fact(100)
fact(1000)
fact(10)
fact(10000)
isInsideTriangle((0,0,(-340,495), (-153,-910), (835,-947)))
isInsideTriangle((0,0),(-340,495), (-153,-910), (835,-947))
split("a,b,c,d",",")
map(Int,["1","34"])
map(Integer,["1","34"])
Int("123")
Integer("123")
convert(Int,"123")
parse(Int,"1234")
parse(Int,"1234.0")
parse(Float,"1234.0")
parse(float,"1234.0")
parse(Float32,"1234.0")
parse(Float16,"1234.0")
parse(Float16,"1234.0")
parse(Float16,"1234.00")
parse(Float16,"4.0")
parse(Float64,"4.0")
parse(Float64,"4.000099988888888888888")
parse(BigFloat,"4.000099988888888888888")
z=parse(BigFloat,"4.000099988888888888888")
z^2
z=parse(BigInt,"4")
z*74785875849494949494847464646474848494004484746355353
eu
z*eu
map(x->parse(Int,x), ["123","5","444"])
euler102()
euler102()
euler102()
euler102()
euler102()
euler102()
m
f=open("euler102.txt")
m=readcsv(f)
help()
?
m[1]
typeof(m[1])
m[1:]
size(m)
size(m)[1]
strides(m)
200~for i in 1:size(M,2)
    col = slice(M,:,i)
    # some code
end
indices(m)
indices(m,1)
indices(m,2)
m[1,:]
size(m,1)
euler102alt()
euler102alt()
euler102alt()
euler102alt()
euler102alt()
typeof(m[1])
l=m[1,:]
(a,b,c,d,e,f) = l
a
b
c
d
e
f
euler102alt()
euler102alt()
euler102alt()
euler102alt()
euler102alt()
euler102alt(5)
euler102alt(1)
euler102alt(5)
f=open("euler102.txt","r")
euler102alt()
euler102alt()
euler102alt()
euler102alt()
(a,b) = [5,6]
a
b
(a,b),(c,d) = [1,2,3,4]
((a,b),(c,d) ) = [1,2,3,4]
euler102alt()
euler102alt()
i=1
i++
fibsCycle(1000)
count = 0
fibsCycle(1000)
count += 1
count
fibsCycle(1000)
fibsCycle(1000)
fibsCycle(400000)
1234123 %100000000000
1234123  % 1000000000
fibsCycle(400000)
fibsCycle(400000)
246839725641
fib(541)
96978839725641
fib(541)
fibsCycle(400000)
fibsCycle(400000)
Pkg.add("ContinuedFractions")
Pkg.update()
whos(Continuedfractions)
Pkg.add("ContinuedFractions")
whos(ContinuedFractions)
ContinuedFraction(1/4)
ContinuedFraction(1/4)
ContinuedFraction.Continuedfraction(1/4)
ContinuedFractions.Continuedfraction(1/4)
ContinuedFractions.ContinuedFraction(1/4)
cf = ContinuedFractionsqrt(2)
cf = ContinuedFraction(sqrt(2))
[(x,y) for x in 1:12 y in 1:12 if x*y % (x + y) == 0]
[(x,y) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x,y) for x in 1:12 y in 1:12 if x*y % (x + y) == 0]
[(x,y) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x*y % (x + y) == 0 , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x*y % (x + y) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x*y % (x + y) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x*y % (x + y) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x*y / (x + y) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x*y / (x + y) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[(x*y / (x + y) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
6/2
div(6,2)
[(div(x*y , (x + y)) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
sort![(div(x*y , (x + y)) , (x,y)) for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
sort![[div(x*y , (x + y)) , [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[[div(x*y , (x + y)) , [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
sort!([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0])
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
sort([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],1)
sort())
sort([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],1)
sort([[div(x*y , (x + y))  x, y] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],1)
sort([[div(x*y , (x + y))  x y] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],1)
[div(x*y , (x + y))  x y] for x in 1:12, y in 1:12 if x*y % (x + y) == 0
[div(x*y , (x + y))  x y] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0][1]
sort([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0])
sort([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],2)
sort([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],1)
flatten([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],1)
reshape([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0],1)
reshape([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0])
flatten([[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0])
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0][1]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0 && div(x*y,(x + y) == 4)]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0 && div(x*y,(x + y) == 4)]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 4]
[[div(x*y , (x + y))  [x y]] for x in 1:12, y in 1:12 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 5]
[[div(x*y , (x + y))  [x y]] for x in 1:20, y in 1:20 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 5]
[[div(x*y , (x + y))  [x y]] for x in 1:100, y in 1:100 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 5]
[[div(x*y , (x + y))  [x y]] for x in 1:100, y in 1:200 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 5]
[[div(x*y , (x + y))  [x y]] for x in 1:100, y in 1:200 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 4]
[[div(x*y , (x + y))  [x y]] for x in 1:100, y in 1:200 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 6]
[[div(x*y , (x + y))  [x y]] for x in 1:200, y in 1:200 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 6]
[[div(x*y , (x + y))  [x y]] for x in 1:1000, y in 1:1000 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 6]
[[div(x*y , (x + y))  [x y]] for x in 1:1000, y in 1:1000 if x*y % (x + y) == 0 && div(x*y,(x + y)) == 7]
enumerate(1:10)
collect(enumerate(1:10))
quick_search(4)
quick_search(5)
quick_search(6)
quick_search(7)
quick_search(8)
quick_search(9)
quick_search(10)
quick_search(11)
quick_search(17)
quick_search(17,10000)
quick_search(17)
quick_search(24)
quick_search(24)
quick_search(200)
@time quick_search(24)
@time quick_search(24)
@time quick_search(24)
@time quick_search(24)
@time quick_search(24)
@time quick_search(24)
@time quick_search(24)
@time quick_search(3)
@time quick_search(2)
@time quick_search(1)
@time quick_search(2)
@time quick_search(3)
@time quick_search(4)
@time quick_search(5)
@time quick_search(6)
@time quick_search(7)
@time quick_search(8)
@time quick_search(9)
@time quick_search(10)
@time quick_search(11)
@time quick_search(12)
@time quick_search(13)
@time quick_search(14)
@time quick_search(15)
@time quick_search(16)
@time quick_search(17)
@time quick_search(18)
@time quick_search(19)
@time quick_search(20)
@time map((x)->(x[2]*x[3]),quick_search(20))
@time map((x)->(x[2]*x[3]),quick_search(4))
@time map((x)->(x[2]*x[3]),quick_search(3))
@time map((x)->(x[2]*x[3]),quick_search(2))
@time map((x)->(x[2]*x[3]),quick_search(5))
@time map((x)->(x[2]*x[3]),)
quick_search(5)
@time map((x)->(x[2]*x[3],x),quick_search(5))
@time map((x)->(x[2]*x[3] x),quick_search(5))
@time map((x)->(x[2]*x[3], x),quick_search(5))
@time map((x)->(x[2]*x[3], x),quick_search(4))
quick_search(2)
quick_search(3)
quick_search(4)
quick_search(5)
quick_search(6)
quick_search(7)
quick_search(8)
quick_search(9)
quick_search(10)
quick_search(11)
primes(123456)
primes(123456)
length(primes(123456))
length(primes(3423452345345))
