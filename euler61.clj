#!/usr/bin/env cake
;;
;; euler57.clj
;;
;;

;; Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate
;; (polygonal) numbers and are generated by the following formulae:
;;
;; Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
;; Square	 	P4,n=n2 	      	1, 4, 9, 16, 25, ...
;; Pentagonal	 	P5,n=n(3n - 1)/2	1, 5, 12, 22, 35, ...
;; Hexagonal	 	P6,n=n(2n - 1)	 	1, 6, 15, 28, 45, ...
;; Heptagonal	 	P7,n=n(5n - 3)/2	1, 7, 18, 34, 55, ...
;; Octagonal	 	P8,n=n(3n - 2)	 	1, 8, 21, 40, 65, ...
;;
;; The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
;;
;; The set is cyclic, in that the last two digits of each number is the first two digits of the
;; next number (including the last number with the first).
;; Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
;; is represented by a different number in the set.
;; This is the only set of 4-digit numbers with this property.
;; Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
;; triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different
;; number in the set.

;(use 'sage)
(use 'clojure.repl)
(use '[clojure.string :only (join trim split split-lines)])
(require 'cbd)
(require '[clojure.math.numeric-tower :as clojure.math])
(require '[clojure.math.combinatorics :as clojure.combinatorics])
(require '[clojure.set])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn triangles [n] (/ (* n (inc n)) 2))

(defn squares [n] (* n n))

(defn pentagonals[n] (/ (* n (- (* 3 n) 1)) 2))

(defn hexagonals [n] (* n (- (* 2 n) 1)))

(defn heptagonals [n] (/ (* n (- (* 5 n) 3)) 2))

(defn octagonals [n] (* n (- (* 3 n) 2)))

(defn four-digit [poly-fn]
  (map vector
       (drop-while #(< %  1e3) (take-while #(< %  1e4) (map poly-fn (range))))))

(def polygonals
  (map four-digit [triangles squares pentagonals hexagonals heptagonals octagonals]))

(defn split-number [n] (map #(join %) (split-at 2 (str n))))

(defn linked? [n1 n2]
  (= (second (split-number n1)) (first (split-number n2))))

(defn links [ns1 ns2]
  (for [n1 ns1, n2 ns2 :when (linked? (last n1) (first n2))] (conj n1  (first n2))))

(defn cyclical [polygonal-set]
   (filter #(linked? (last %) (first %))
           (reduce links polygonal-set)))

(defn euler61 []
  (let [cylical-set
        (first (first (for [poly-set (clojure.combinatorics/permutations polygonals)
                      :let [ps (cyclical poly-set)] :when (not-empty ps)]
                  ps)))]
    [(reduce + cylical-set) cylical-set]))

;; user> (euler61)
;; [28684 [8256 5625 2512 1281 8128 2882]]







